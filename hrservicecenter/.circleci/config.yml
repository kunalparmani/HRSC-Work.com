# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
defaults: &defaults
    working_directory: ~/repo
    docker:
        - image: salesforce/circleci-docker-sfdx-cci-browsers:latest
          auth:
              username: $DOCKERHUB_USERNAME
              password: $DOCKERHUB_PASSWORD

filter-only-beta-tags: &filter-only-beta-tags
    filters:
        branches:
            ignore:
                - /.*/
        tags:
            only:
                - /^beta-[0-9]+(\.[0-9]+)*$/

filter-only-release-tags: &filter-only-release-tags
    filters:
        branches:
            ignore:
                - /.*/
        tags:
            only:
                - /^release-[0-9]+(\.[0-9]+)*$/

orbs:
    slack: circleci/slack@4.3

parameters:
    engSlackChannelId:
        type: string
        default: "C0149TBM9TR"

commands:
    sfdx_auth_devhub:
        steps:
            - run:
                  name: "SFDX - Authenticate to DevHub"
                  command: |
                      echo $SFDXURL_HUB > ./sfdx.url
                      sfdx force:auth:sfdxurl:store -f ./sfdx.url -a circle_build_$CIRCLE_BUILD_NUM --setdefaultdevhubusername -a hub
    assign_permission_sets:
        steps:
            - run:
                  name: "Assign Permsets: workplace"
                  command: sfdx force:user:permset:assign --permsetname workplace
            - run:
                  name: "Assign Permsets: workplace_user"
                  command: sfdx force:user:permset:assign --permsetname workplace_user
            - run:
                  name: "Assign Permsets: skip_identity_confirmation"
                  command: sfdx force:user:permset:assign --permsetname skip_identity_confirmation
    sfdx_install_latest_package_version:
        parameters:
            packagename:
                type: string
        steps:
            - run:
                  name: "SFDX - Install Latest Package"
                  command: |
                      latestVersion=$(sfdx force:package:version:list -p '<< parameters.packagename >>' -o CreatedDate --concise --json | jq -e -r ".result[-1].SubscriberPackageVersionId")
                      echo "Install ${latestVersion} on scratch org"
                      sfdx force:package:install --package ${latestVersion} -w 20

    sfdx_install_latest_package_version_with_tag:
        parameters:
            packagename:
                type: string
            tagname:
                type: string
        steps:
            - run:
                  name: "SFDX - Install Latest Package with tag"
                  command: |
                      latestVersion=$(sfdx force:package:version:list -p '<< parameters.packagename >>' -o CreatedDate --concise | tail -1 | awk '{print $3}')
                      echo "Install ${latestVersion} on scratch org"
                      sfdx force:package:install -p ${latestVersion} -w 10

    cci_connect_github:
        steps:
            - run:
                  name: "Authenticate CCI to GitHub"
                  command: |
                      cci service connect github \
                      --username $GITHUB_METADEPLOY_USER \
                      --token $GITHUB_METADEPLOY_PASSWORD \
                      --email $GITHUB_METADEPLOY_EMAIL

jobs:
    integrate:
        <<: *defaults
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "package-lock.json" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-
            - run: npm install
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "package-lock.json" }}
            - run: npm run lint:lwc
            - run: npm run prettier:verify:standalone
            - run:
                  name: "Run Jest Code Coverage"
                  command: |
                      mkdir -p ./artifacts/test-results
                      npm run test:unit:coverage -- --coverageDirectory=./artifacts/test-results
            - run:
                  name: "Run Source Code Scanner"
                  working_directory: ./artifacts/test-results/
                  command: |
                      npm run scan:ci
            - sfdx_auth_devhub
            - cci_connect_github
            - run:
                  name:
                      Create
                      #command: sfdx force:org:create -f config/project-scratch-def.json -d 1 -s -a scratch --noancestors
                  command: |
                      sfdx force:package:version:list -p 'Employee Workspace devint' -o CreatedDate --concise | tail -1 | awk '{print $3}'
                      export SFDX_ORG_CREATE_ARGS=--noancestors
                      sfdx force:package:version:list -p 'Employee Workspace devint' -o CreatedDate --concise | tail -1 | awk '{print $3}'
                      cci org scratch release test_org --default --days 2
                      cci org info
            - run:
                  name: "Deploy Source"
                  command: cci flow run dev_org --org test_org
                  no_output_timeout: 20m
            # - run:
            #       name: "Run Apex Code Coverage"
            #       no_output_timeout: 30m
            #       command: |
            #           export SFDX_MAX_QUERY_LIMIT=20000
            #           export SFDX_IMPROVED_CODE_COVERAGE='true'
            #           npm run test:apex:coverage -- -d ./artifacts/test-results -r json
            - run:
                  name: Cleanup
                  command: sfdx force:org:delete -p -u hrservicecenter__test_org
                  when: always
            # - run:
            #       name: Remove Duplicate Apex Coverage XML File
            #       command: rm ./artifacts/test-results/test-result*junit.xml
            #       when: always
            # - run:
            #       name: Rename Apex Coverage Json File to be Uploaded
            #       command: |
            #           mv ./artifacts/test-results/test-result-codecoverage.json ./artifacts/test-results/raw-test-result-codecoverage.json
            #           cp ./artifacts/test-results/test-result-*.json ./artifacts/test-results/codecoverage-apex.json
            #           rm ./artifacts/test-results/test-result-*.json
            #       when: always
            - store_test_results:
                  path: ./artifacts/test-results
            - store_artifacts:
                  path: ./artifacts

    check-package:
        <<: *defaults
        parameters:
            ew-packagename:
                type: string
            ec-packagename:
                type: string
            hrsc-packagename:
                type: string
            hrscmetadata-packagename:
                type: string
        steps:
            - checkout
            - sfdx_auth_devhub
            - run:
                  name: Create
                  command: sfdx force:org:create -f config/project-scratch-def.json -n -d 1 -s -a scratch --noancestors
            - sfdx_install_latest_package_version_with_tag:
                  packagename: "<< parameters.ew-packagename >>"
                  tagname: "$CIRCLE_SHA1"
            - sfdx_install_latest_package_version_with_tag:
                  packagename: "<< parameters.ec-packagename >>"
                  tagname: "$CIRCLE_SHA1"
            - sfdx_install_latest_package_version_with_tag:
                  packagename: "<< parameters.hrsc-packagename >>"
                  tagname: "$CIRCLE_SHA1"
            - sfdx_install_latest_package_version_with_tag:
                  packagename: "<< parameters.hrscmetadata-packagename >>"
                  tagname: "$CIRCLE_SHA1"
            - run:
                  name: Cleanup
                  command: sfdx force:org:delete -p -u scratch
                  when: always

    validate-pull-request:
        <<: *defaults
        steps:
            - run:
                  name: "Checking PR name"
                  command: |
                      if [ -n "$CIRCLE_PULL_REQUEST" ]; then
                        pr_number=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f7)
                        url="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${pr_number}"
                        pr_name=$(curl -H "Authorization: token ${GITHUB_PAT}" ${url} 2>/dev/null |  jq -r .title)
                        
                        if ! [[ $pr_name =~ ^@W-[0-9]{7,9}@\ .+ ]]; then
                            echo "ERROR: Pull request title doesn't contain a GUS WI"
                            echo "Please ensure that the PR title starts with @W-xyz@"
                            exit 1
                        fi
                      fi

    metadeploy_copy:
        <<: *defaults
        steps:
            - checkout
            - cci_connect_github
            - run:
                  name: "CCI copy metadeploy changes to metadeploy-hrservicecenter repository"
                  command: |
                      cci task run github_copy_subtree -o repo_url https://github.com/CovidBackToWork/metadeploy-hrservicecenter \
                       -o branch main \
                       -o include sfdx-project.json,force-app/main/default/hrservicecenter.md,cumulusci.yml,metadeploy/,cumulusCI/,.git2gus/ \
                       -o create_release False \
                       -o ref $CIRCLE_SHA1

    automation:
        <<: *defaults
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "package-lock.json" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-
            - run: npm install
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "package-lock.json" }}
            - persist_to_workspace:
                  root: ~/repo
                  paths: .
            - sfdx_auth_devhub
            - run: mkdir -p ./artifacts/test-results
            - cci_connect_github
            - run:
                  name: "Create Scratch Org Shell and Authorize"
                  command: |
                      sfdx force:package:version:list -p 'Employee Workspace devint' -o CreatedDate --concise | tail -1 | awk '{print $3}'
                      export SFDX_ORG_CREATE_ARGS=--noancestors
                      sfdx force:package:version:list -p 'Employee Workspace devint' -o CreatedDate --concise | tail -1 | awk '{print $3}'
                      cci org scratch release regression_test_org --default --days 2

            - run:
                  name: "Deploy source"
                  command: |
                      cci flow run dev_org --org regression_test_org
            - run:
                  name: Robot
                  command: cci task run robot -o suites robot/hrservicecenter/tests -o vars BROWSER:chrome
            - run:
                  name: "Move Automation Outputs to Artifacts Directory"
                  command: |
                      mv robot/results/*.* ./artifacts || :
                  when: always
            - run:
                  name: Cleanup
                  command: cci org scratch_delete regression_test_org
                  when: always
            - slack/notify:
                  channel: "C0149TBM9TR"
                  branch_pattern: main
                  event: fail
                  template: basic_fail_1
            - store_test_results:
                  path: ./artifacts/test-results
            - store_artifacts:
                  path: ./artifacts

    create-package-version:
        <<: *defaults
        parameters:
            packagename:
                type: string
                default: HR Service Center
        steps:
            - checkout
            - sfdx_auth_devhub
            - run:
                  name: "Create package version"
                  command: |
                      echo "Will create a new package version for << parameters.packagename >> with tag $CIRCLE_SHA1"
                      sfdx force:package:version:create -f config/project-scratch-def.json -x -p "<< parameters.packagename >>" -w 30 --codecoverage -t $CIRCLE_SHA1
            - run:
                  name: "Log package version infos"
                  command: |
                      echo "Fetch new package infos from devhub for tag $CIRCLE_SHA1 -e $CIRCLE_TAG"
                      sfdx force:package:version:list -p "<< parameters.packagename >>" -o CreatedDate --verbose --json | jq -e "[.result[] | select(.Tag ==\"${CIRCLE_SHA1}\")][-1]"

    create-unlocked-package-version:
        <<: *defaults
        parameters:
            packagename:
                type: string
                default: HR Service Center Metadata
        steps:
            - checkout
            - sfdx_auth_devhub
            - run:
                  name: "Create package version"
                  command: |
                      echo "Will create a new package version for << parameters.packagename >> with tag $CIRCLE_SHA1"
                      sfdx force:package:version:create -f config/project-scratch-def.json -x -p "<< parameters.packagename >>" -w 30 --codecoverage -t $CIRCLE_SHA1
            - run:
                  name: "Log package version infos"
                  command: |
                      echo "Fetch new package infos from devhub for tag $CIRCLE_SHA1 -e $CIRCLE_TAG"
                      sfdx force:package:version:list -p "<< parameters.packagename >>" -o CreatedDate --verbose --json | jq -e "[.result[] | select(.Tag ==\"${CIRCLE_SHA1}\")][-1]"

    promote-package-version:
        <<: *defaults
        parameters:
            packagename:
                type: string
                default: HR Service Center
        steps:
            - checkout
            - sfdx_auth_devhub
            - run:
                  name: "Promote Package Version"
                  command: |
                      tagVersionId=`sfdx force:package:version:list -p "<< parameters.packagename >>" -o CreatedDate --verbose --json | jq -e -r "[.result[] | select(.Tag ==\"${CIRCLE_SHA1}\")][-1] | .SubscriberPackageVersionId"`
                      echo "Will promote versionId ${tagVersionId}"
                      sfdx force:package:version:promote -n -p $tagVersionId

workflows:
    version: 2.1
    integration_flow:
        jobs:
            - validate-pull-request:
                  context: "PR checks"
                  filters:
                      branches:
                          ignore:
                              - main
                              - /^v.*-bug-fix/
            - integrate:
                  context: "SFDX dev-int Dev Hub"
            - automation:
                  context:
                      - "SFDX dev-int Dev Hub"
                      - SLACK-SECRETS
                  filters:
                      branches:
                          only:
                              - main
                              - /^v.*-bug-fix/
                              - /.*\/#automation\/.*/
            - create-package-version:
                  name: Create Beta Package for Devint Dev Hub
                  context: "SFDX dev-int Dev Hub"
                  packagename: "HR Service Center devint"
                  filters:
                      branches:
                          only:
                              - main
            - create-unlocked-package-version:
                  name: Create HR Service Center Metadata Beta Package for Devint Dev Hub
                  context: "SFDX dev-int Dev Hub"
                  packagename: "HR Service Center Metadata devint"
                  filters:
                      branches:
                          only:
                              - main
            - check-package:
                  name: Check Beta Package Installation for Devint
                  context: "SFDX dev-int Dev Hub"
                  ew-packagename: "Employee Workspace devint"
                  ec-packagename: "Employee Concierge devint"
                  hrsc-packagename: "HR Service Center devint"
                  hrscmetadata-packagename: "HR Service Center Metadata devint"
                  requires:
                      - "Create Beta Package for Devint Dev Hub"
                  filters:
                      branches:
                          only:
                              - main
            - create-package-version:
                  name: Create Beta Package for Branch
                  context: "SFDX dev-int Dev Hub"
                  packagename: "HR Service Center DevTest package"
                  filters:
                      branches:
                          only:
                              - /.*\/#package\/.*/
            # - check-package:
            #       name: Check Beta Package Installation for Branch
            #       context: "SFDX dev-int Dev Hub"
            #       packagename: "HR Service Center DevTest package"
            #       requires:
            #           - "Create Beta Package for Branch"
            #       filters:
            #           branches:
            #               only:
            #                   - /.*\/#package\/.*/
            - metadeploy_copy:
                  context: "SFDX Dev Hub"
                  requires:
                      - integrate
                  filters:
                      # Run for main branch only and copy to metadeploy config repository dev-int branch
                      branches:
                          only:
                              - main
    beta_package_delivery_flow:
        jobs:
            - integrate:
                  context: "SFDX dev-int Dev Hub"
                  <<: *filter-only-beta-tags
            - automation:
                  context:
                      - "SFDX dev-int Dev Hub"
                      - SLACK-SECRETS
                  <<: *filter-only-beta-tags
            - create-package-version:
                  name: Create Beta Package for Devint Dev Hub
                  context: "SFDX dev-int Dev Hub"
                  packagename: "HR Service Center devint"
                  <<: *filter-only-beta-tags
            - create-unlocked-package-version:
                  name: Create HR Service Center Metadata Beta Package for Devint Dev Hub
                  context: "SFDX dev-int Dev Hub"
                  packagename: "HR Service Center Metadata devint"
                  requires:
                      - "Create Beta Package for Devint Dev Hub"
                  <<: *filter-only-beta-tags
            - check-package:
                  name: Check Beta Package Installation for Devint Dev Hub
                  context: "SFDX dev-int Dev Hub"
                  ew-packagename: "Employee Workspace devint"
                  ec-packagename: "Employee Concierge devint"
                  hrsc-packagename: "HR Service Center devint"
                  hrscmetadata-packagename: "HR Service Center Metadata devint"
                  requires:
                      - "Create HR Service Center Metadata Beta Package for Devint Dev Hub"
                  <<: *filter-only-beta-tags
            - slack/on-hold:
                  name: Notify Beta Package approval is needed
                  channel: << pipeline.parameters.engSlackChannelId >>
                  custom: '{"text":"CircleCI job on hold, waiting for approval.","blocks":[{"type":"header","text":{"type":"plain_text","text":"Beta Package Awaiting Approval :package:","emoji":true}},{"type":"section","fields":[{"type":"mrkdwn","text":"*Project*:\n$CIRCLE_PROJECT_REPONAME"},{"type":"mrkdwn","text":"*Tag*:\n$CIRCLE_TAG"}],"accessory":{"type":"image","image_url":"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png","alt_text":"CircleCI logo"}},{"type":"section","fields":[{"type":"mrkdwn","text":"*Mentions*:\n$SLACK_PARAM_MENTIONS"}]},{"type":"actions","elements":[{"type":"button","text":{"type":"plain_text","text":"View Workflow"},"url":"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"}]}]}'
                  requires:
                      - integrate
                      - automation
                      - Check Beta Package Installation for Devint Dev Hub
                  context:
                      - SLACK-SECRETS
                  <<: *filter-only-beta-tags

            - hold-for-package-creation-approval:
                  type: approval
                  requires:
                      - "Notify Beta Package approval is needed"
                  <<: *filter-only-beta-tags

            - create-package-version:
                  name: Create Beta Package for Dev Hub
                  context:
                      - "SFDX Dev Hub"
                      - "SFDX Dev Hub package approval"
                  packagename: "HR Service Center"
                  requires:
                      - hold-for-package-creation-approval
                  <<: *filter-only-beta-tags

            - create-unlocked-package-version:
                  name: Create HR Service Center Metadata Beta Package
                  context:
                      - "SFDX Dev Hub"
                      - "SFDX Dev Hub package approval"
                  packagename: "HR Service Center Metadata"
                  requires:
                      - hold-for-package-creation-approval
                      - "Create Beta Package for Dev Hub"
                  <<: *filter-only-beta-tags

            - create-package-version:
                  name: Create Beta Package for STMPB Dev Hub
                  context:
                      - "SFDX STMPB Dev Hub"
                      - "SFDX Dev Hub package approval"
                  packagename: "HR Service Center STMPB"
                  requires:
                      - hold-for-package-creation-approval
                  <<: *filter-only-beta-tags

    promotion_delivery_flow:
        jobs:
            - slack/on-hold:
                  name: Notify Package Promotion approval is needed
                  channel: << pipeline.parameters.engSlackChannelId >>
                  custom: '{"text":"CircleCI job on hold, waiting for approval.","blocks":[{"type":"header","text":{"type":"plain_text","text":"Package Promotion Awaiting Approval :rocket:","emoji":true}},{"type":"section","fields":[{"type":"mrkdwn","text":"*Project*:\n$CIRCLE_PROJECT_REPONAME"},{"type":"mrkdwn","text":"*Tag*:\n$CIRCLE_TAG"}],"accessory":{"type":"image","image_url":"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png","alt_text":"CircleCI logo"}},{"type":"section","fields":[{"type":"mrkdwn","text":"*Mentions*:\n$SLACK_PARAM_MENTIONS"}]},{"type":"actions","elements":[{"type":"button","text":{"type":"plain_text","text":"View Workflow"},"url":"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"}]}]}'
                  context:
                      - SLACK-SECRETS
                  <<: *filter-only-release-tags

            - hold-for-package-promotion-approval:
                  type: approval
                  requires:
                      - "Notify Package Promotion approval is needed"
                  <<: *filter-only-release-tags

            - promote-package-version:
                  context:
                      - "SFDX Dev Hub"
                      - "SFDX Dev Hub package promotion approval"
                  packagename: "HR Service Center"
                  requires:
                      - hold-for-package-promotion-approval
                  <<: *filter-only-release-tags

            - promote-package-version:
                  context:
                      - "SFDX Dev Hub"
                      - "SFDX Dev Hub package promotion approval"
                  packagename: "HR Service Center Metadata"
                  requires:
                      - hold-for-package-promotion-approval
                  <<: *filter-only-release-tags
